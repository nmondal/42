/* Entity End Point Handling */
ENTITY_CONFIG = _shared["ENTITIES"]

def all_versions(){
    begin = req.queryParams("start") ?? 0
    max = req.queryParams("max") ?? 30
    versions = _ds.storage.listVersions( bucket, entity_id, begin, max )
    panic( empty(versions), jstr( {"success" : false, "message" : "such a data version does not exist!" } ), 404 )
    jstr( { "urn" : entity_urn , "versions" : versions } )
}

def at_version(){
    ver_id = req.params("ver")
    old_string = _ds.storage.stringAtVersion( bucket, entity_id, ver_id ) // loads the string version of the data
    panic( empty(old_string), jstr( {"success" : false, "message" : "such a data version does not exist!" } ), 404 )
    old_string  // return the data
}

entity_urn = req.params("id")
#(entity_class, entity_id) = entity_urn.split(":")
assert( entity_class @ ENTITY_CONFIG, jstr( {"success" : false, "message" : "entity-class is not configured!" } ), 404 )
bucket = ENTITY_CONFIG[entity_class]["bucket"]

op_type = ( req.pathInfo #^ "/version/" )
op_type ? at_version() : all_versions()
